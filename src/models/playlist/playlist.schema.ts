import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, SchemaTypes, Types } from 'mongoose';
import { Exclude, Expose, plainToInstance, Type } from 'class-transformer';
import { BasicSchema } from '../abstract/basic.schema';
import { User } from '../user/user.schema';
import { Track } from '../track/track.schema';

type T_PlaylistDocument = Playlist & Document;
@Exclude()
@Schema({
  timestamps: true,
  collection: 'playlists',
  toObject: {
    virtuals: true,
  },
  toJSON: {
    virtuals: true,
    transform: (doc, res) => {
      return plainToInstance(Playlist, res);
    },
  },
})
class Playlist extends BasicSchema {
  @Expose()
  @Prop()
  title!: string;

  @Expose()
  @Prop()
  coverImage?: string;

  @Expose()
  @Type(() => String)
  @Prop({ type: [SchemaTypes.ObjectId], ref: Track.name, default: [] })
  tracksIds!: Types.ObjectId[];

  @Expose()
  @Type(() => Track)
  tracks?: Track[];

  @Expose()
  @Type(() => Boolean)
  @Prop({ required: true, default: false })
  isAutogenerated!: boolean;

  @Expose()
  @Type(() => String)
  @Prop({
    required: false,
    index: 1,
    type: SchemaTypes.ObjectId,
    ref: User.name,
  })
  userId?: Types.ObjectId;
}

const PlaylistSchema = SchemaFactory.createForClass(Playlist);

PlaylistSchema.virtual('tracks', {
  ref: Track.name,
  localField: 'tracksIds',
  foreignField: '_id',
  autopopulate: true,
});

export { PlaylistSchema, Playlist, T_PlaylistDocument };
